// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/WaterGAP3.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// subset_get
NumericVector subset_get(NumericVector vec_Data, IntegerVector int_Index);
static SEXP _WaterGAP3_subset_get_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_get(vec_Data, int_Index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_subset_get(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_subset_get_try(vec_DataSEXP, int_IndexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subset_get_logical
LogicalVector subset_get_logical(LogicalVector vec_Data, IntegerVector int_Index);
static SEXP _WaterGAP3_subset_get_logical_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_get_logical(vec_Data, int_Index));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_subset_get_logical(SEXP vec_DataSEXP, SEXP int_IndexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_subset_get_logical_try(vec_DataSEXP, int_IndexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// subset_put
void subset_put(NumericVector& vec_Data, IntegerVector int_Index, NumericVector vec_DataPut);
static SEXP _WaterGAP3_subset_put_try(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataPutSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< NumericVector& >::type vec_Data(vec_DataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type int_Index(int_IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_DataPut(vec_DataPutSEXP);
    subset_put(vec_Data, int_Index, vec_DataPut);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_subset_put(SEXP vec_DataSEXP, SEXP int_IndexSEXP, SEXP vec_DataPutSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_subset_put_try(vec_DataSEXP, int_IndexSEXP, vec_DataPutSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// WaterGAP3_H
List WaterGAP3_H(int n_time, int n_spat, NumericMatrix AtmoS_precipitation_mm, NumericMatrix AtmoS_temperature_Cel, NumericMatrix AtmoS_solarRadiat_MJ, NumericVector snoW_ice_mm, NumericVector soiL_water_mm, NumericVector soiL_capacity_mm, NumericVector soiL_potentialPercola_mm, NumericVector grounD_water_mm, NumericVector grounD_capacity_mm, NumericVector riveR_water_m3, NumericVector riveR_length_km, NumericVector riveR_velocity_km, NumericVector celL_landArea_km2, List celL_cellNumberStep_int, List celL_inflowCellNumberStep_int, NumericVector param_atmos_thr_Ts, NumericVector param_snow_fac_f, NumericVector param_snow_fac_Tmelt, NumericVector param_evatrans_tur_k, NumericVector param_evatrans_ubc_gamma, NumericVector param_infilt_hbv_beta, NumericVector param_percola_arn_k, NumericVector param_percola_arn_thresh, NumericVector param_baseflow_grf_gamma, bool if_allVariExport);
RcppExport SEXP _WaterGAP3_WaterGAP3_H(SEXP n_timeSEXP, SEXP n_spatSEXP, SEXP AtmoS_precipitation_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP AtmoS_solarRadiat_MJSEXP, SEXP snoW_ice_mmSEXP, SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP soiL_potentialPercola_mmSEXP, SEXP grounD_water_mmSEXP, SEXP grounD_capacity_mmSEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_landArea_km2SEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP, SEXP param_atmos_thr_TsSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP, SEXP param_evatrans_tur_kSEXP, SEXP param_evatrans_ubc_gammaSEXP, SEXP param_infilt_hbv_betaSEXP, SEXP param_percola_arn_kSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_baseflow_grf_gammaSEXP, SEXP if_allVariExportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_time(n_timeSEXP);
    Rcpp::traits::input_parameter< int >::type n_spat(n_spatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_precipitation_mm(AtmoS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_temperature_Cel(AtmoS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_solarRadiat_MJ(AtmoS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type snoW_ice_mm(snoW_ice_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_water_mm(soiL_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_capacity_mm(soiL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_potentialPercola_mm(soiL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grounD_water_mm(grounD_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grounD_capacity_mm(grounD_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_water_m3(riveR_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_length_km(riveR_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_velocity_km(riveR_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type celL_landArea_km2(celL_landArea_km2SEXP);
    Rcpp::traits::input_parameter< List >::type celL_cellNumberStep_int(celL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type celL_inflowCellNumberStep_int(celL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_atmos_thr_Ts(param_atmos_thr_TsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_f(param_snow_fac_fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_Tmelt(param_snow_fac_TmeltSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_tur_k(param_evatrans_tur_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_ubc_gamma(param_evatrans_ubc_gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_hbv_beta(param_infilt_hbv_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_k(param_percola_arn_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_thresh(param_percola_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_grf_gamma(param_baseflow_grf_gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type if_allVariExport(if_allVariExportSEXP);
    rcpp_result_gen = Rcpp::wrap(WaterGAP3_H(n_time, n_spat, AtmoS_precipitation_mm, AtmoS_temperature_Cel, AtmoS_solarRadiat_MJ, snoW_ice_mm, soiL_water_mm, soiL_capacity_mm, soiL_potentialPercola_mm, grounD_water_mm, grounD_capacity_mm, riveR_water_m3, riveR_length_km, riveR_velocity_km, celL_landArea_km2, celL_cellNumberStep_int, celL_inflowCellNumberStep_int, param_atmos_thr_Ts, param_snow_fac_f, param_snow_fac_Tmelt, param_evatrans_tur_k, param_evatrans_ubc_gamma, param_infilt_hbv_beta, param_percola_arn_k, param_percola_arn_thresh, param_baseflow_grf_gamma, if_allVariExport));
    return rcpp_result_gen;
END_RCPP
}
// WaterGAP3_HL
List WaterGAP3_HL(int n_time, int n_spat, NumericMatrix AtmoS_precipitation_mm, NumericMatrix AtmoS_temperature_Cel, NumericMatrix AtmoS_solarRadiat_MJ, NumericVector snoW_ice_mm, NumericVector soiL_water_mm, NumericVector soiL_capacity_mm, NumericVector soiL_potentialPercola_mm, NumericVector grounD_water_mm, NumericVector grounD_capacity_mm, NumericVector riveR_water_m3, NumericVector riveR_length_km, NumericVector riveR_velocity_km, NumericVector celL_landArea_km2, List celL_cellNumberStep_int, List celL_inflowCellNumberStep_int, IntegerVector lake_cellNumber_int, NumericVector lake_water_m3, NumericVector lake_area_km2, NumericVector lake_capacity_m3, IntegerVector riverlake_cellNumber_int, NumericVector riverlake_water_m3, NumericVector riverlake_area_km2, NumericVector riverlake_capacity_m3, NumericVector param_atmos_thr_Ts, NumericVector param_snow_fac_f, NumericVector param_snow_fac_Tmelt, NumericVector param_evatrans_tur_k, NumericVector param_evatrans_ubc_gamma, NumericVector param_infilt_hbv_beta, NumericVector param_percola_arn_k, NumericVector param_percola_arn_thresh, NumericVector param_baseflow_grf_gamma, NumericVector param_evatrans_vic_gamma, NumericVector param_lake_acp_storeFactor, NumericVector param_lake_acp_gamma, NumericVector param_riverlake_lin_storeFactor, bool if_allVariExport);
RcppExport SEXP _WaterGAP3_WaterGAP3_HL(SEXP n_timeSEXP, SEXP n_spatSEXP, SEXP AtmoS_precipitation_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP AtmoS_solarRadiat_MJSEXP, SEXP snoW_ice_mmSEXP, SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP soiL_potentialPercola_mmSEXP, SEXP grounD_water_mmSEXP, SEXP grounD_capacity_mmSEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_landArea_km2SEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP, SEXP lake_cellNumber_intSEXP, SEXP lake_water_m3SEXP, SEXP lake_area_km2SEXP, SEXP lake_capacity_m3SEXP, SEXP riverlake_cellNumber_intSEXP, SEXP riverlake_water_m3SEXP, SEXP riverlake_area_km2SEXP, SEXP riverlake_capacity_m3SEXP, SEXP param_atmos_thr_TsSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP, SEXP param_evatrans_tur_kSEXP, SEXP param_evatrans_ubc_gammaSEXP, SEXP param_infilt_hbv_betaSEXP, SEXP param_percola_arn_kSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_baseflow_grf_gammaSEXP, SEXP param_evatrans_vic_gammaSEXP, SEXP param_lake_acp_storeFactorSEXP, SEXP param_lake_acp_gammaSEXP, SEXP param_riverlake_lin_storeFactorSEXP, SEXP if_allVariExportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_time(n_timeSEXP);
    Rcpp::traits::input_parameter< int >::type n_spat(n_spatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_precipitation_mm(AtmoS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_temperature_Cel(AtmoS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type AtmoS_solarRadiat_MJ(AtmoS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type snoW_ice_mm(snoW_ice_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_water_mm(soiL_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_capacity_mm(soiL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_potentialPercola_mm(soiL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grounD_water_mm(grounD_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grounD_capacity_mm(grounD_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_water_m3(riveR_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_length_km(riveR_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_velocity_km(riveR_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type celL_landArea_km2(celL_landArea_km2SEXP);
    Rcpp::traits::input_parameter< List >::type celL_cellNumberStep_int(celL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type celL_inflowCellNumberStep_int(celL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lake_cellNumber_int(lake_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lake_water_m3(lake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lake_area_km2(lake_area_km2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lake_capacity_m3(lake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type riverlake_cellNumber_int(riverlake_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_water_m3(riverlake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_area_km2(riverlake_area_km2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_capacity_m3(riverlake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_atmos_thr_Ts(param_atmos_thr_TsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_f(param_snow_fac_fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_Tmelt(param_snow_fac_TmeltSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_tur_k(param_evatrans_tur_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_ubc_gamma(param_evatrans_ubc_gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_hbv_beta(param_infilt_hbv_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_k(param_percola_arn_kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_thresh(param_percola_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_grf_gamma(param_baseflow_grf_gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_vic_gamma(param_evatrans_vic_gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lake_acp_storeFactor(param_lake_acp_storeFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lake_acp_gamma(param_lake_acp_gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_riverlake_lin_storeFactor(param_riverlake_lin_storeFactorSEXP);
    Rcpp::traits::input_parameter< bool >::type if_allVariExport(if_allVariExportSEXP);
    rcpp_result_gen = Rcpp::wrap(WaterGAP3_HL(n_time, n_spat, AtmoS_precipitation_mm, AtmoS_temperature_Cel, AtmoS_solarRadiat_MJ, snoW_ice_mm, soiL_water_mm, soiL_capacity_mm, soiL_potentialPercola_mm, grounD_water_mm, grounD_capacity_mm, riveR_water_m3, riveR_length_km, riveR_velocity_km, celL_landArea_km2, celL_cellNumberStep_int, celL_inflowCellNumberStep_int, lake_cellNumber_int, lake_water_m3, lake_area_km2, lake_capacity_m3, riverlake_cellNumber_int, riverlake_water_m3, riverlake_area_km2, riverlake_capacity_m3, param_atmos_thr_Ts, param_snow_fac_f, param_snow_fac_Tmelt, param_evatrans_tur_k, param_evatrans_ubc_gamma, param_infilt_hbv_beta, param_percola_arn_k, param_percola_arn_thresh, param_baseflow_grf_gamma, param_evatrans_vic_gamma, param_lake_acp_storeFactor, param_lake_acp_gamma, param_riverlake_lin_storeFactor, if_allVariExport));
    return rcpp_result_gen;
END_RCPP
}
// get_inflow_cells
List get_inflow_cells(IntegerVector int_Outflow);
RcppExport SEXP _WaterGAP3_get_inflow_cells(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inflow_cells(int_Outflow));
    return rcpp_result_gen;
END_RCPP
}
// get_inflow_lastcell
NumericMatrix get_inflow_lastcell(IntegerVector int_Outflow);
RcppExport SEXP _WaterGAP3_get_inflow_lastcell(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inflow_lastcell(int_Outflow));
    return rcpp_result_gen;
END_RCPP
}
// get_step_param
List get_step_param(IntegerVector int_Outflow);
RcppExport SEXP _WaterGAP3_get_step_param(SEXP int_OutflowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type int_Outflow(int_OutflowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_step_param(int_Outflow));
    return rcpp_result_gen;
END_RCPP
}
// atmosSnow_ThresholdT
NumericVector atmosSnow_ThresholdT(NumericVector AtmoS_precipitation_mm, NumericVector AtmoS_temperature_Cel, NumericVector param_atmos_thr_Ts);
static SEXP _WaterGAP3_atmosSnow_ThresholdT_try(SEXP AtmoS_precipitation_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP param_atmos_thr_TsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_precipitation_mm(AtmoS_precipitation_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_temperature_Cel(AtmoS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_atmos_thr_Ts(param_atmos_thr_TsSEXP);
    rcpp_result_gen = Rcpp::wrap(atmosSnow_ThresholdT(AtmoS_precipitation_mm, AtmoS_temperature_Cel, param_atmos_thr_Ts));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_atmosSnow_ThresholdT(SEXP AtmoS_precipitation_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP param_atmos_thr_TsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_atmosSnow_ThresholdT_try(AtmoS_precipitation_mmSEXP, AtmoS_temperature_CelSEXP, param_atmos_thr_TsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransPotential_TurcWendling
NumericVector evatransPotential_TurcWendling(NumericVector AtmoS_temperature_Cel, NumericVector AtmoS_solarRadiat_MJ, NumericVector param_evatrans_tur_k);
static SEXP _WaterGAP3_evatransPotential_TurcWendling_try(SEXP AtmoS_temperature_CelSEXP, SEXP AtmoS_solarRadiat_MJSEXP, SEXP param_evatrans_tur_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_temperature_Cel(AtmoS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_solarRadiat_MJ(AtmoS_solarRadiat_MJSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_tur_k(param_evatrans_tur_kSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransPotential_TurcWendling(AtmoS_temperature_Cel, AtmoS_solarRadiat_MJ, param_evatrans_tur_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_evatransPotential_TurcWendling(SEXP AtmoS_temperature_CelSEXP, SEXP AtmoS_solarRadiat_MJSEXP, SEXP param_evatrans_tur_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_evatransPotential_TurcWendling_try(AtmoS_temperature_CelSEXP, AtmoS_solarRadiat_MJSEXP, param_evatrans_tur_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_VIC
NumericVector evatransActual_VIC(NumericVector AtmoS_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_vic_gamma);
static SEXP _WaterGAP3_evatransActual_VIC_try(SEXP AtmoS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_vic_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_potentialEvatrans_mm(AtmoS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_vic_gamma(param_evatrans_vic_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_VIC(AtmoS_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_vic_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_evatransActual_VIC(SEXP AtmoS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_vic_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_evatransActual_VIC_try(AtmoS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_vic_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// evatransActual_UBC
NumericVector evatransActual_UBC(NumericVector AtmoS_potentialEvatrans_mm, NumericVector water_mm, NumericVector capacity_mm, NumericVector param_evatrans_ubc_gamma);
static SEXP _WaterGAP3_evatransActual_UBC_try(SEXP AtmoS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_ubc_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_potentialEvatrans_mm(AtmoS_potentialEvatrans_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type water_mm(water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capacity_mm(capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_evatrans_ubc_gamma(param_evatrans_ubc_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(evatransActual_UBC(AtmoS_potentialEvatrans_mm, water_mm, capacity_mm, param_evatrans_ubc_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_evatransActual_UBC(SEXP AtmoS_potentialEvatrans_mmSEXP, SEXP water_mmSEXP, SEXP capacity_mmSEXP, SEXP param_evatrans_ubc_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_evatransActual_UBC_try(AtmoS_potentialEvatrans_mmSEXP, water_mmSEXP, capacity_mmSEXP, param_evatrans_ubc_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// snowMelt_Factor
NumericVector snowMelt_Factor(NumericVector snoW_ice_mm, NumericVector AtmoS_temperature_Cel, NumericVector param_snow_fac_f, NumericVector param_snow_fac_Tmelt);
static SEXP _WaterGAP3_snowMelt_Factor_try(SEXP snoW_ice_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type snoW_ice_mm(snoW_ice_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type AtmoS_temperature_Cel(AtmoS_temperature_CelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_f(param_snow_fac_fSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_snow_fac_Tmelt(param_snow_fac_TmeltSEXP);
    rcpp_result_gen = Rcpp::wrap(snowMelt_Factor(snoW_ice_mm, AtmoS_temperature_Cel, param_snow_fac_f, param_snow_fac_Tmelt));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_snowMelt_Factor(SEXP snoW_ice_mmSEXP, SEXP AtmoS_temperature_CelSEXP, SEXP param_snow_fac_fSEXP, SEXP param_snow_fac_TmeltSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_snowMelt_Factor_try(snoW_ice_mmSEXP, AtmoS_temperature_CelSEXP, param_snow_fac_fSEXP, param_snow_fac_TmeltSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// infilt_HBV
NumericVector infilt_HBV(NumericVector lanD_water_mm, NumericVector soiL_water_mm, NumericVector soiL_capacity_mm, NumericVector param_infilt_hbv_beta);
static SEXP _WaterGAP3_infilt_HBV_try(SEXP lanD_water_mmSEXP, SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP param_infilt_hbv_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lanD_water_mm(lanD_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_water_mm(soiL_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_capacity_mm(soiL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_infilt_hbv_beta(param_infilt_hbv_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(infilt_HBV(lanD_water_mm, soiL_water_mm, soiL_capacity_mm, param_infilt_hbv_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_infilt_HBV(SEXP lanD_water_mmSEXP, SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP param_infilt_hbv_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_infilt_HBV_try(lanD_water_mmSEXP, soiL_water_mmSEXP, soiL_capacity_mmSEXP, param_infilt_hbv_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// percola_Arno
NumericVector percola_Arno(NumericVector soiL_water_mm, NumericVector soiL_capacity_mm, NumericVector soiL_potentialPercola_mm, NumericVector param_percola_arn_thresh, NumericVector param_percola_arn_k);
static SEXP _WaterGAP3_percola_Arno_try(SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP soiL_potentialPercola_mmSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_percola_arn_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type soiL_water_mm(soiL_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_capacity_mm(soiL_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type soiL_potentialPercola_mm(soiL_potentialPercola_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_thresh(param_percola_arn_threshSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_percola_arn_k(param_percola_arn_kSEXP);
    rcpp_result_gen = Rcpp::wrap(percola_Arno(soiL_water_mm, soiL_capacity_mm, soiL_potentialPercola_mm, param_percola_arn_thresh, param_percola_arn_k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_percola_Arno(SEXP soiL_water_mmSEXP, SEXP soiL_capacity_mmSEXP, SEXP soiL_potentialPercola_mmSEXP, SEXP param_percola_arn_threshSEXP, SEXP param_percola_arn_kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_percola_Arno_try(soiL_water_mmSEXP, soiL_capacity_mmSEXP, soiL_potentialPercola_mmSEXP, param_percola_arn_threshSEXP, param_percola_arn_kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// baseflow_GR4Jfix
NumericVector baseflow_GR4Jfix(NumericVector grounD_water_mm, NumericVector grounD_capacity_mm, NumericVector param_baseflow_grf_gamma);
static SEXP _WaterGAP3_baseflow_GR4Jfix_try(SEXP grounD_water_mmSEXP, SEXP grounD_capacity_mmSEXP, SEXP param_baseflow_grf_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type grounD_water_mm(grounD_water_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grounD_capacity_mm(grounD_capacity_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_baseflow_grf_gamma(param_baseflow_grf_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(baseflow_GR4Jfix(grounD_water_mm, grounD_capacity_mm, param_baseflow_grf_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_baseflow_GR4Jfix(SEXP grounD_water_mmSEXP, SEXP grounD_capacity_mmSEXP, SEXP param_baseflow_grf_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_baseflow_GR4Jfix_try(grounD_water_mmSEXP, grounD_capacity_mmSEXP, param_baseflow_grf_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// lake_AcceptPow
NumericVector lake_AcceptPow(NumericVector lake_water_m3, NumericVector lake_inflow_m3, NumericVector lake_capacity_m3, NumericVector param_lake_acp_storeFactor, NumericVector param_lake_acp_gamma);
static SEXP _WaterGAP3_lake_AcceptPow_try(SEXP lake_water_m3SEXP, SEXP lake_inflow_m3SEXP, SEXP lake_capacity_m3SEXP, SEXP param_lake_acp_storeFactorSEXP, SEXP param_lake_acp_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lake_water_m3(lake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lake_inflow_m3(lake_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lake_capacity_m3(lake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lake_acp_storeFactor(param_lake_acp_storeFactorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_lake_acp_gamma(param_lake_acp_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(lake_AcceptPow(lake_water_m3, lake_inflow_m3, lake_capacity_m3, param_lake_acp_storeFactor, param_lake_acp_gamma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_lake_AcceptPow(SEXP lake_water_m3SEXP, SEXP lake_inflow_m3SEXP, SEXP lake_capacity_m3SEXP, SEXP param_lake_acp_storeFactorSEXP, SEXP param_lake_acp_gammaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_lake_AcceptPow_try(lake_water_m3SEXP, lake_inflow_m3SEXP, lake_capacity_m3SEXP, param_lake_acp_storeFactorSEXP, param_lake_acp_gammaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// river_LinearResorvoir
NumericVector river_LinearResorvoir(NumericVector riveR_water_m3, NumericVector riveR_inflow_m3, NumericVector riveR_velocity_km, NumericVector riveR_length_km);
static SEXP _WaterGAP3_river_LinearResorvoir_try(SEXP riveR_water_m3SEXP, SEXP riveR_inflow_m3SEXP, SEXP riveR_velocity_kmSEXP, SEXP riveR_length_kmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type riveR_water_m3(riveR_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_inflow_m3(riveR_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_velocity_km(riveR_velocity_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_length_km(riveR_length_kmSEXP);
    rcpp_result_gen = Rcpp::wrap(river_LinearResorvoir(riveR_water_m3, riveR_inflow_m3, riveR_velocity_km, riveR_length_km));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_river_LinearResorvoir(SEXP riveR_water_m3SEXP, SEXP riveR_inflow_m3SEXP, SEXP riveR_velocity_kmSEXP, SEXP riveR_length_kmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_river_LinearResorvoir_try(riveR_water_m3SEXP, riveR_inflow_m3SEXP, riveR_velocity_kmSEXP, riveR_length_kmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// riverlake_LinearResorvoir
NumericVector riverlake_LinearResorvoir(NumericVector riverlake_water_m3, NumericVector riverlake_inflow_m3, NumericVector riverlake_capacity_m3, NumericVector param_riverlake_lin_storeFactor);
static SEXP _WaterGAP3_riverlake_LinearResorvoir_try(SEXP riverlake_water_m3SEXP, SEXP riverlake_inflow_m3SEXP, SEXP riverlake_capacity_m3SEXP, SEXP param_riverlake_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_water_m3(riverlake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_inflow_m3(riverlake_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_capacity_m3(riverlake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_riverlake_lin_storeFactor(param_riverlake_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(riverlake_LinearResorvoir(riverlake_water_m3, riverlake_inflow_m3, riverlake_capacity_m3, param_riverlake_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_riverlake_LinearResorvoir(SEXP riverlake_water_m3SEXP, SEXP riverlake_inflow_m3SEXP, SEXP riverlake_capacity_m3SEXP, SEXP param_riverlake_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_riverlake_LinearResorvoir_try(riverlake_water_m3SEXP, riverlake_inflow_m3SEXP, riverlake_capacity_m3SEXP, param_riverlake_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reservoir_Hanasaki
NumericVector reservoir_Hanasaki(NumericVector reservoir_water_m3, NumericVector reservoir_inflow_m3, NumericVector reservoir_capacity_m3, NumericVector reservoir_demand_m3, NumericVector reservoir_yearInflow_m3, NumericVector reservoir_yearDemand_m3, NumericVector& reservoir_yearRelase_m3, LogicalVector reservoir_isOperateStart_01, LogicalVector reservoir_isIrrigate_01, NumericVector param_reservoir_han_alpha, NumericVector param_reservoir_han_kDemand);
static SEXP _WaterGAP3_reservoir_Hanasaki_try(SEXP reservoir_water_m3SEXP, SEXP reservoir_inflow_m3SEXP, SEXP reservoir_capacity_m3SEXP, SEXP reservoir_demand_m3SEXP, SEXP reservoir_yearInflow_m3SEXP, SEXP reservoir_yearDemand_m3SEXP, SEXP reservoir_yearRelase_m3SEXP, SEXP reservoir_isOperateStart_01SEXP, SEXP reservoir_isIrrigate_01SEXP, SEXP param_reservoir_han_alphaSEXP, SEXP param_reservoir_han_kDemandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_water_m3(reservoir_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_inflow_m3(reservoir_inflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_capacity_m3(reservoir_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_demand_m3(reservoir_demand_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_yearInflow_m3(reservoir_yearInflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type reservoir_yearDemand_m3(reservoir_yearDemand_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type reservoir_yearRelase_m3(reservoir_yearRelase_m3SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type reservoir_isOperateStart_01(reservoir_isOperateStart_01SEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type reservoir_isIrrigate_01(reservoir_isIrrigate_01SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_reservoir_han_alpha(param_reservoir_han_alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_reservoir_han_kDemand(param_reservoir_han_kDemandSEXP);
    rcpp_result_gen = Rcpp::wrap(reservoir_Hanasaki(reservoir_water_m3, reservoir_inflow_m3, reservoir_capacity_m3, reservoir_demand_m3, reservoir_yearInflow_m3, reservoir_yearDemand_m3, reservoir_yearRelase_m3, reservoir_isOperateStart_01, reservoir_isIrrigate_01, param_reservoir_han_alpha, param_reservoir_han_kDemand));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_reservoir_Hanasaki(SEXP reservoir_water_m3SEXP, SEXP reservoir_inflow_m3SEXP, SEXP reservoir_capacity_m3SEXP, SEXP reservoir_demand_m3SEXP, SEXP reservoir_yearInflow_m3SEXP, SEXP reservoir_yearDemand_m3SEXP, SEXP reservoir_yearRelase_m3SEXP, SEXP reservoir_isOperateStart_01SEXP, SEXP reservoir_isIrrigate_01SEXP, SEXP param_reservoir_han_alphaSEXP, SEXP param_reservoir_han_kDemandSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_reservoir_Hanasaki_try(reservoir_water_m3SEXP, reservoir_inflow_m3SEXP, reservoir_capacity_m3SEXP, reservoir_demand_m3SEXP, reservoir_yearInflow_m3SEXP, reservoir_yearDemand_m3SEXP, reservoir_yearRelase_m3SEXP, reservoir_isOperateStart_01SEXP, reservoir_isIrrigate_01SEXP, param_reservoir_han_alphaSEXP, param_reservoir_han_kDemandSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3
NumericVector confluen_WaterGAP3(NumericVector conflueN_cellInflow_m3, NumericVector& riveR_water_m3, NumericVector riveR_length_km, NumericVector riveR_velocity_km, List celL_cellNumberStep_int, List celL_inflowCellNumberStep_int);
static SEXP _WaterGAP3_confluen_WaterGAP3_try(SEXP conflueN_cellInflow_m3SEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type conflueN_cellInflow_m3(conflueN_cellInflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type riveR_water_m3(riveR_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_length_km(riveR_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_velocity_km(riveR_velocity_kmSEXP);
    Rcpp::traits::input_parameter< List >::type celL_cellNumberStep_int(celL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type celL_inflowCellNumberStep_int(celL_inflowCellNumberStep_intSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3(conflueN_cellInflow_m3, riveR_water_m3, riveR_length_km, riveR_velocity_km, celL_cellNumberStep_int, celL_inflowCellNumberStep_int));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_confluen_WaterGAP3(SEXP conflueN_cellInflow_m3SEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_confluen_WaterGAP3_try(conflueN_cellInflow_m3SEXP, riveR_water_m3SEXP, riveR_length_kmSEXP, riveR_velocity_kmSEXP, celL_cellNumberStep_intSEXP, celL_inflowCellNumberStep_intSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// confluen_WaterGAP3_L
NumericVector confluen_WaterGAP3_L(NumericVector conflueN_cellInflow_m3, NumericVector& riveR_water_m3, NumericVector riveR_length_km, NumericVector riveR_velocity_km, List celL_cellNumberStep_int, List celL_inflowCellNumberStep_int, IntegerVector riverlake_cellNumber_int, NumericVector& riverlake_water_m3, NumericVector riverlake_capacity_m3, NumericVector param_riverlake_lin_storeFactor);
static SEXP _WaterGAP3_confluen_WaterGAP3_L_try(SEXP conflueN_cellInflow_m3SEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP, SEXP riverlake_cellNumber_intSEXP, SEXP riverlake_water_m3SEXP, SEXP riverlake_capacity_m3SEXP, SEXP param_riverlake_lin_storeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type conflueN_cellInflow_m3(conflueN_cellInflow_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type riveR_water_m3(riveR_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_length_km(riveR_length_kmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riveR_velocity_km(riveR_velocity_kmSEXP);
    Rcpp::traits::input_parameter< List >::type celL_cellNumberStep_int(celL_cellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< List >::type celL_inflowCellNumberStep_int(celL_inflowCellNumberStep_intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type riverlake_cellNumber_int(riverlake_cellNumber_intSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type riverlake_water_m3(riverlake_water_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type riverlake_capacity_m3(riverlake_capacity_m3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_riverlake_lin_storeFactor(param_riverlake_lin_storeFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(confluen_WaterGAP3_L(conflueN_cellInflow_m3, riveR_water_m3, riveR_length_km, riveR_velocity_km, celL_cellNumberStep_int, celL_inflowCellNumberStep_int, riverlake_cellNumber_int, riverlake_water_m3, riverlake_capacity_m3, param_riverlake_lin_storeFactor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _WaterGAP3_confluen_WaterGAP3_L(SEXP conflueN_cellInflow_m3SEXP, SEXP riveR_water_m3SEXP, SEXP riveR_length_kmSEXP, SEXP riveR_velocity_kmSEXP, SEXP celL_cellNumberStep_intSEXP, SEXP celL_inflowCellNumberStep_intSEXP, SEXP riverlake_cellNumber_intSEXP, SEXP riverlake_water_m3SEXP, SEXP riverlake_capacity_m3SEXP, SEXP param_riverlake_lin_storeFactorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_WaterGAP3_confluen_WaterGAP3_L_try(conflueN_cellInflow_m3SEXP, riveR_water_m3SEXP, riveR_length_kmSEXP, riveR_velocity_kmSEXP, celL_cellNumberStep_intSEXP, celL_inflowCellNumberStep_intSEXP, riverlake_cellNumber_intSEXP, riverlake_water_m3SEXP, riverlake_capacity_m3SEXP, param_riverlake_lin_storeFactorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _WaterGAP3_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*subset_get)(NumericVector,IntegerVector)");
        signatures.insert("LogicalVector(*subset_get_logical)(LogicalVector,IntegerVector)");
        signatures.insert("void(*subset_put)(NumericVector&,IntegerVector,NumericVector)");
        signatures.insert("NumericVector(*atmosSnow_ThresholdT)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransPotential_TurcWendling)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_VIC)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*evatransActual_UBC)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*snowMelt_Factor)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*infilt_HBV)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*percola_Arno)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*baseflow_GR4Jfix)(NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*lake_AcceptPow)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*river_LinearResorvoir)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*riverlake_LinearResorvoir)(NumericVector,NumericVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*reservoir_Hanasaki)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector&,LogicalVector,LogicalVector,NumericVector,NumericVector)");
        signatures.insert("NumericVector(*confluen_WaterGAP3)(NumericVector,NumericVector&,NumericVector,NumericVector,List,List)");
        signatures.insert("NumericVector(*confluen_WaterGAP3_L)(NumericVector,NumericVector&,NumericVector,NumericVector,List,List,IntegerVector,NumericVector&,NumericVector,NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _WaterGAP3_RcppExport_registerCCallable() { 
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_subset_get", (DL_FUNC)_WaterGAP3_subset_get_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_subset_get_logical", (DL_FUNC)_WaterGAP3_subset_get_logical_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_subset_put", (DL_FUNC)_WaterGAP3_subset_put_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_atmosSnow_ThresholdT", (DL_FUNC)_WaterGAP3_atmosSnow_ThresholdT_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_evatransPotential_TurcWendling", (DL_FUNC)_WaterGAP3_evatransPotential_TurcWendling_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_evatransActual_VIC", (DL_FUNC)_WaterGAP3_evatransActual_VIC_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_evatransActual_UBC", (DL_FUNC)_WaterGAP3_evatransActual_UBC_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_snowMelt_Factor", (DL_FUNC)_WaterGAP3_snowMelt_Factor_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_infilt_HBV", (DL_FUNC)_WaterGAP3_infilt_HBV_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_percola_Arno", (DL_FUNC)_WaterGAP3_percola_Arno_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_baseflow_GR4Jfix", (DL_FUNC)_WaterGAP3_baseflow_GR4Jfix_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_lake_AcceptPow", (DL_FUNC)_WaterGAP3_lake_AcceptPow_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_river_LinearResorvoir", (DL_FUNC)_WaterGAP3_river_LinearResorvoir_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_riverlake_LinearResorvoir", (DL_FUNC)_WaterGAP3_riverlake_LinearResorvoir_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_reservoir_Hanasaki", (DL_FUNC)_WaterGAP3_reservoir_Hanasaki_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_confluen_WaterGAP3", (DL_FUNC)_WaterGAP3_confluen_WaterGAP3_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_confluen_WaterGAP3_L", (DL_FUNC)_WaterGAP3_confluen_WaterGAP3_L_try);
    R_RegisterCCallable("WaterGAP3", "_WaterGAP3_RcppExport_validate", (DL_FUNC)_WaterGAP3_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_WaterGAP3_subset_get", (DL_FUNC) &_WaterGAP3_subset_get, 2},
    {"_WaterGAP3_subset_get_logical", (DL_FUNC) &_WaterGAP3_subset_get_logical, 2},
    {"_WaterGAP3_subset_put", (DL_FUNC) &_WaterGAP3_subset_put, 3},
    {"_WaterGAP3_WaterGAP3_H", (DL_FUNC) &_WaterGAP3_WaterGAP3_H, 27},
    {"_WaterGAP3_WaterGAP3_HL", (DL_FUNC) &_WaterGAP3_WaterGAP3_HL, 39},
    {"_WaterGAP3_get_inflow_cells", (DL_FUNC) &_WaterGAP3_get_inflow_cells, 1},
    {"_WaterGAP3_get_inflow_lastcell", (DL_FUNC) &_WaterGAP3_get_inflow_lastcell, 1},
    {"_WaterGAP3_get_step_param", (DL_FUNC) &_WaterGAP3_get_step_param, 1},
    {"_WaterGAP3_atmosSnow_ThresholdT", (DL_FUNC) &_WaterGAP3_atmosSnow_ThresholdT, 3},
    {"_WaterGAP3_evatransPotential_TurcWendling", (DL_FUNC) &_WaterGAP3_evatransPotential_TurcWendling, 3},
    {"_WaterGAP3_evatransActual_VIC", (DL_FUNC) &_WaterGAP3_evatransActual_VIC, 4},
    {"_WaterGAP3_evatransActual_UBC", (DL_FUNC) &_WaterGAP3_evatransActual_UBC, 4},
    {"_WaterGAP3_snowMelt_Factor", (DL_FUNC) &_WaterGAP3_snowMelt_Factor, 4},
    {"_WaterGAP3_infilt_HBV", (DL_FUNC) &_WaterGAP3_infilt_HBV, 4},
    {"_WaterGAP3_percola_Arno", (DL_FUNC) &_WaterGAP3_percola_Arno, 5},
    {"_WaterGAP3_baseflow_GR4Jfix", (DL_FUNC) &_WaterGAP3_baseflow_GR4Jfix, 3},
    {"_WaterGAP3_lake_AcceptPow", (DL_FUNC) &_WaterGAP3_lake_AcceptPow, 5},
    {"_WaterGAP3_river_LinearResorvoir", (DL_FUNC) &_WaterGAP3_river_LinearResorvoir, 4},
    {"_WaterGAP3_riverlake_LinearResorvoir", (DL_FUNC) &_WaterGAP3_riverlake_LinearResorvoir, 4},
    {"_WaterGAP3_reservoir_Hanasaki", (DL_FUNC) &_WaterGAP3_reservoir_Hanasaki, 11},
    {"_WaterGAP3_confluen_WaterGAP3", (DL_FUNC) &_WaterGAP3_confluen_WaterGAP3, 6},
    {"_WaterGAP3_confluen_WaterGAP3_L", (DL_FUNC) &_WaterGAP3_confluen_WaterGAP3_L, 10},
    {"_WaterGAP3_RcppExport_registerCCallable", (DL_FUNC) &_WaterGAP3_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_WaterGAP3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
